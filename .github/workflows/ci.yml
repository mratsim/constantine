name: Constantine CI
on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        branch: [devel] # [version-1-2, devel] - # 1.2 doesn't compile https://github.com/mratsim/constantine/pull/20#issuecomment-646327952
        target:
          - os: linux
            cpu: amd64
            TEST_LANG: c
          - os: linux
            cpu: amd64
            TEST_LANG: cpp
          - os: linux
            cpu: i386
            TEST_LANG: c
          - os: linux
            cpu: i386
            TEST_LANG: cpp
          - os: macos
            cpu: amd64
            TEST_LANG: c
          - os: macos
            cpu: amd64
            TEST_LANG: cpp
          # TODO:
          #   1. Modulo/reduce bug on 32-bit
          #   2. ModInverse bug on all windows
          # - os: windows
          #   cpu: amd64
          #   TEST_LANG: c
          # - os: windows
          #   cpu: amd64
          #   TEST_LANG: cpp
          # - os: windows
          #   cpu: i386
          #   TEST_LANG: c
          # - os: windows
          #   cpu: i386
          #   TEST_LANG: cpp
        include:
          - target:
              os: linux
            builder: ubuntu-18.04
          - target:
              os: macos
            builder: macos-10.15
          # - target:
          #     os: windows
          #   builder: windows-2019
    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ matrix.target.TEST_LANG }} (${{ matrix.branch }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout constantine
        uses: actions/checkout@v2
        with:
          path: constantine

      - name: Install dependencies (Linux amd64)
        if: runner.os == 'Linux' && matrix.target.cpu == 'amd64'
        run: |
          sudo DEBIAN_FRONTEND='noninteractive' apt-fast install \
            --no-install-recommends -yq libgmp-dev

      - name: Install dependencies (Linux i386)
        if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-fast update -qq
          sudo DEBIAN_FRONTEND='noninteractive' apt-fast install \
            --no-install-recommends -yq gcc-multilib g++-multilib \
            libssl-dev:i386 libgmp-dev:i386
          mkdir -p external/bin
          cat << EOF > external/bin/gcc
          #!/bin/bash
          exec $(which gcc) -m32 "\$@"
          EOF
          cat << EOF > external/bin/g++
          #!/bin/bash
          exec $(which g++) -m32 "\$@"
          EOF
          chmod 755 external/bin/gcc external/bin/g++
          echo '::add-path::${{ github.workspace }}/external/bin'

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install gmp

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir external
          if [[ '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            arch=64
          else
            arch=32
          fi
          curl -L "https://nim-lang.org/download/mingw$arch-6.3.0.7z" -o "external/mingw$arch.7z"
          curl -L "https://nim-lang.org/download/windeps.zip" -o external/windeps.zip
          7z x "external/mingw$arch.7z" -oexternal/
          7z x external/windeps.zip -oexternal/dlls
          echo '::add-path::${{ github.workspace }}'"/external/mingw$arch/bin"
          echo '::add-path::${{ github.workspace }}'"/external/dlls"

          choco install msys2
          pacman -S mingw-w64-x86_64-gmp

      - name: Setup environment
        shell: bash
        run: echo '::add-path::${{ github.workspace }}/nim/bin'

      - name: Get latest Nim commit hash
        id: versions
        shell: bash
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          nimHash=$(getHash nim-lang/Nim '${{ matrix.branch }}')
          csourcesHash=$(getHash nim-lang/csources)
          echo "::set-output name=nim::$nimHash"
          echo "::set-output name=csources::$csourcesHash"
      - name: Restore prebuilt Nim from cache
        id: nim-cache
        uses: actions/cache@v1
        with:
          path: nim
          key: 'nim-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.nim }}'

      - name: Restore prebuilt csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: csources/bin
          key: 'csources-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.csources }}'

      - name: Checkout Nim csources
        if: >
          steps.csources-cache.outputs.cache-hit != 'true' &&
          steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/csources
          path: csources
          ref: ${{ steps.versions.outputs.csources }}

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          path: nim
          ref: ${{ steps.versions.outputs.nim }}

      - name: Build Nim and associated tools
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ncpu=
          ext=
          case '${{ runner.os }}' in
          'Linux')
            ncpu=$(nproc)
            ;;
          'macOS')
            ncpu=$(sysctl -n hw.ncpu)
            ;;
          'Windows')
            ncpu=$NUMBER_OF_PROCESSORS
            ext=.exe
            ;;
          esac
          [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
          if [[ ! -e csources/bin/nim$ext ]]; then
            make -C csources -j $ncpu CC=gcc ucpu='${{ matrix.target.cpu }}'
          else
            echo 'Using prebuilt csources'
          fi
          cp -v csources/bin/nim$ext nim/bin
          cd nim
          nim c koch
          ./koch boot -d:release
          ./koch tools -d:release
          # clean up to save cache space
          rm koch
          rm -rf nimcache
          rm -rf dist
          rm -rf .git
      - name: Install test dependencies
        shell: bash
        run: |
          nimble refresh
          nimble install -y gmp stew
      - name: Run Constantine tests (with Assembler & with GMP)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.target.cpu == 'amd64'
        shell: bash
        run: |
          export UCPU="$cpu"
          cd constantine
          nimble test_parallel
      - name: Run Constantine tests (no Assembler & with GMP)
        if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.target.cpu == 'amd64'
        shell: bash
        run: |
          export UCPU="$cpu"
          cd constantine
          nimble test_parallel_no_assembler
      - name: Run Constantine tests (without GMP)
        if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
        shell: bash
        run: |
          export UCPU="$cpu"
          cd constantine
          nimble test_parallel_no_gmp
      - name: Run Constantine tests (without Assembler or GMP)
        if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
        shell: bash
        run: |
          export UCPU="$cpu"
          cd constantine
          nimble test_parallel_no_gmp_no_assembler
