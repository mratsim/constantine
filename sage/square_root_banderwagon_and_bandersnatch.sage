#Parameters
p = 52435875175126190479447740508185965837690552500527637822603658699938581184513
Fp = GF(p)

# BaseField2Adicity = 32  #see https://github.com/crate-crypto/go-ipa/blob/408dbffb2041271c95979a3fb79d98b268bf2880/bandersnatch/fp/sqrt.go#L22
# ret[] is an array of size BaseField2Adicity+1 = 33 which in sage we will work with 33 variables "ret_0", "ret_1", "ret_2", ..., "ret_32" instead of an array
# ret_0 should be equal to 10238227357739495823651030575849232062558860180284477541189508159991286009131 (see https://github.com/crate-crypto/go-ipa/blob/408dbffb2041271c95979a3fb79d98b268bf2880/bandersnatch/fp/sqrt.go#L46)

print('p  : ' + p.hex())

# function sqrtPrecomp_PrimitiveDyadicRoots:
ret_0 = 10238227357739495823651030575849232062558860180284477541189508159991286009131
print('ret_0  : ' + hex(ret_0))
ret_1 = Fp(ret_0^2)
print('ret_1  : ' + hex(ret_1))
ret_2 = Fp(ret_1^2)
print('ret_2  : ' + hex(ret_2))
ret_3 = Fp(ret_2^2)
print('ret_3  : ' + hex(ret_3))
ret_4 = Fp(ret_3^2)
print('ret_4  : ' + hex(ret_4))
ret_5 = Fp(ret_4^2)
print('ret_5  : ' + hex(ret_5))
ret_6 = Fp(ret_5^2)
print('ret_6  : ' + hex(ret_6))
ret_7 = Fp(ret_6^2)
print('ret_7  : ' + hex(ret_7))
ret_8 = Fp(ret_7^2)
print('ret_8  : ' + hex(ret_8))
ret_9 = Fp(ret_8^2)
print('ret_9  : ' + hex(ret_9))
ret_10 = Fp(ret_9^2)
print('ret_10 : ' + hex(ret_10))
ret_11 = Fp(ret_10^2)
print('ret_11 : ' + hex(ret_11))
ret_12 = Fp(ret_11^2)
print('ret_12 : ' + hex(ret_12))
ret_13 = Fp(ret_12^2)
print('ret_13 : ' + hex(ret_13))
ret_14 = Fp(ret_13^2)
print('ret_14 : ' + hex(ret_14))
ret_15 = Fp(ret_14^2)
print('ret_15 : ' + hex(ret_15))
ret_16 = Fp(ret_15^2)
print('ret_16 : ' + hex(ret_16))
ret_17 = Fp(ret_16^2)
print('ret_17 : ' + hex(ret_17))
ret_18 = Fp(ret_17^2)
print('ret_18 : ' + hex(ret_18))
ret_19 = Fp(ret_18^2)
print('ret_19 : ' + hex(ret_19))
ret_20 = Fp(ret_19^2)
print('ret_20 : ' + hex(ret_20))
ret_21 = Fp(ret_20^2)
print('ret_21 : ' + hex(ret_21))
ret_22 = Fp(ret_21^2)
print('ret_22 : ' + hex(ret_22))
ret_23 = Fp(ret_22^2)
print('ret_23 : ' + hex(ret_23))
ret_24 = Fp(ret_23^2)
print('ret_24 : ' + hex(ret_24))
ret_25 = Fp(ret_24^2)
print('ret_25 : ' + hex(ret_25))
ret_26 = Fp(ret_25^2)
print('ret_26 : ' + hex(ret_26))
ret_27 = Fp(ret_26^2)
print('ret_27 : ' + hex(ret_27))
ret_28 = Fp(ret_27^2)
print('ret_28 : ' + hex(ret_28))
ret_29 = Fp(ret_28^2)
print('ret_29 : ' + hex(ret_29))
ret_30 = Fp(ret_29^2)
print('ret_30 : ' + hex(ret_30))
ret_31 = Fp(ret_30^2)
print('ret_31 : ' + hex(ret_31))
ret_32 = Fp(ret_31^2)
print('ret_32 : ' + hex(ret_32))

flag = Fp(ret_31) == Fp(-1) # ret_31 = ret_<BaseField2Adicity-1> # see https://github.com/crate-crypto/go-ipa/blob/408dbffb2041271c95979a3fb79d98b268bf2880/bandersnatch/fp/sqrt.go#L52
print('Is the the 31st element of the array of dyadic roots of unity correct? ' + str(flag))
#flag should be true unless something is wrong with the dyadic roots of unity