# Constantine
# Copyright (c) 2018-2019    Status Research & Development GmbH
# Copyright (c) 2020-Present Mamy Andr√©-Ratsimbazafy
# Licensed and distributed under either of
#   * MIT license (license terms in the root directory or at http://opensource.org/licenses/MIT).
#   * Apache v2 license (license terms in the root directory or at http://www.apache.org/licenses/LICENSE-2.0).
# at your option. This file may not be copied, modified, or distributed except according to those terms.

import
  std/typetraits,
  ../primitives,
  ../config/[common, curves],
  ../arithmetic,
  ../towers,
  ../elliptic/[
    ec_weierstrass_affine,
    ec_weierstrass_projective
  ],
  ../io/io_towers

# ############################################################
#
#            Miller Loop's Line Evaluation
#             with projective coordinates
#
# ############################################################
#
# - Pairing Implementation Revisited
#   Michael Scott, 2019
#   https://eprint.iacr.org/2019/077
#
# - The Realm of the Pairings
#   Diego F. Aranha and Paulo S. L. M. Barreto
#   and Patrick Longa and Jefferson E. Ricardini, 2013
#   https://eprint.iacr.org/2013/722.pdf
#   http://sac2013.irmacs.sfu.ca/slides/s1.pdf

#
# TODO: Implement fused line doubling and addition
#       from Costello2009 or Aranha2010
#       We don't need the complete formulae in the Miller Loop

type
  Line*[F; twist: static SexticTwist] = object
    ## Packed line representation over a E'(Fp^k/d)
    ## with k the embedding degree and d the twist degree
    ## i.e. for a curve with embedding degree 12 and sextic twist
    ## F is Fp2
    ##
    ## Assuming a Sextic Twist
    ##
    ## Out of 6 Fp2 coordinates, 3 are 0 and
    ## the non-zero coordinates depend on the twist kind.
    ##
    ## For a D-twist,
    ##   (x, y, z) corresponds to an sparse element of Fp12
    ##   with Fp2 coordinates: xy00z0
    ## For a M-Twist
    ##   (x, y, z) corresponds to an sparse element of Fp12
    ##   with Fp2 coordinates: xyz000
    x*, y*, z*: F

func toHex*(line: Line, order: static Endianness = bigEndian): string =
  result = static($line.typeof.genericHead() & '(')
  for fieldName, fieldValue in fieldPairs(line):
    when fieldName != "x":
      result.add ", "
    result.add fieldName & ": "
    result.appendHex(fieldValue, order)
  result.add ")"

# Line evaluation
# --------------------------------------------------

func `*=`(a: var Fp2, b: Fp) =
  ## Multiply an element of Fp2 by an element of Fp
  # TODO: make generic and move to tower_field_extensions
  a.c0 *= b
  a.c1 *= b

func line_update(line: var Line, P: ECP_SWei_Aff) =
  ## Update the line evaluation with P
  ## after addition or doubling
  ## P in G1
  line.x *= P.y
  line.z *= P.x

func line_eval_double*(line: var Line, T: ECP_SWei_Proj) =
  ## Evaluate the line function for doubling
  ## i.e. the tangent at T
  ##
  ## With T in homogenous projective coordinates (X, Y, Z)
  ## And Œæ the sextic non residue to construct ùîΩp4 / ùîΩp6 / ùîΩp12
  ##
  ## M-Twist:
  ##   A = -2Œæ Y.Z
  ##   B = 3bŒæ Z¬≤ - Y¬≤
  ##   C = 3 X¬≤
  ##
  ## D-Twist are scaled by Œæ to avoid dividing by Œæ:
  ##   A = -2Œæ Y.Z
  ##   B = 3b Z¬≤ - ŒæY¬≤
  ##   C = 3Œæ X¬≤
  ##
  ## Instead of
  ##   - equation 10 from The Real of pairing, Aranha et al, 2013
  ##   - or chapter 3 from pairing Implementation Revisited, Scott 2019
  ##   A = -2 Y.Z
  ##   B = 3b/Œæ Z¬≤ - Y¬≤
  ##   C = 3 X¬≤
  ##
  ## A constant factor will be wiped by the final exponentiation
  ## as for all non-zero Œ± ‚àà GF(p·µê)
  ## with
  ## - p odd prime
  ## - and gcd(Œ±,p·µê) = 1 (i.e. the extension field p·µê is using irreducible polynomials)
  ##
  ## Little Fermat holds and we have
  ## Œ±^(p·µê - 1) ‚â° 1 (mod p·µê)
  ##
  ## The final exponent is of the form
  ## (p·µè-1)/r
  ##
  ## A constant factor on twisted coordinates p·µè·êü·µà
  ## is a constant factor on p·µè with d the twisting degree
  ## and so will be elminated. QED.
  var v {.noInit.}: Line.F
  const b3 = 3 * ECP_SWei_Proj.F.C.getCoefB()

  template A: untyped = line.x
  template B: untyped = line.y
  template C: untyped = line.z

  A = T.y               # A = Y
  v = T.y               # v = Y
  B = T.z               # B = Z
  C = T.x               # C = X

  A *= B                # A = Y.Z
  C.square()            # C = X¬≤
  v.square()            # v = Y¬≤
  B.square()            # B = Z¬≤

  A.double()            # A =  2 Y.Z
  A.neg()               # A = -2 Y.Z
  A *= SexticNonResidue # A = -2 Œæ Y.Z

  B *= b3               # B = 3b Z¬≤
  C *= 3                # C = 3X¬≤
  when ECP_SWei_Proj.F.C.getSexticTwist() == M_Twist:
    B *= SexticNonResidue # B = 3b' Z¬≤ = 3bŒæ Z¬≤
  elif ECP_SWei_Proj.F.C.getSexticTwist() == D_Twist:
    v *= SexticNonResidue # v =  Œæ Y¬≤
    C *= SexticNonResidue # C = 3Œæ X¬≤
  else:
    {.error: "unreachable".}

  B -= v                # B = 3bŒæ Z¬≤ - Y¬≤  (M-twist)
                        # B = 3b Z¬≤ - Œæ Y¬≤ (D-twist)

func line_eval_add*(line: var Line, T: ECP_SWei_Proj, Q: ECP_SWei_Aff) =
  ## Evaluate the line function for addition
  ## i.e. the line between T and Q
  ##
  ## With T in homogenous projective coordinates (X, Y, Z)
  ## And Œæ the sextic non residue to construct ùîΩp4 / ùîΩp6 / ùîΩp12
  ##
  ## M-Twist:
  ##   A = Œæ (X‚ÇÅ - Z‚ÇÅX‚ÇÇ)
  ##   B = (Y‚ÇÅ - Z‚ÇÅY‚ÇÇ) X‚ÇÇ - (X‚ÇÅ - Z‚ÇÅX‚ÇÇ) Y‚ÇÇ
  ##   C = - (Y‚ÇÅ - Z‚ÇÅY‚ÇÇ)
  ##
  ## D-Twist:
  ##   A = X‚ÇÅ - Z‚ÇÅX‚ÇÇ
  ##   B = (Y‚ÇÅ - Z‚ÇÅY‚ÇÇ) X‚ÇÇ - (X‚ÇÅ - Z‚ÇÅX‚ÇÇ) Y‚ÇÇ
  ##   C = - (Y‚ÇÅ - Z‚ÇÅY‚ÇÇ)
  ##
  ## Note: There is no need for complete formula as
  ## we have T ‚àâ [Q, -Q] in the Miller loop doubling-and-add
  ## i.e. the line cannot be vertical
  var v {.noInit.}: Line.F

  template A: untyped = line.x
  template B: untyped = line.y
  template C: untyped = line.z

  A = T.x     # A = X‚ÇÅ
  v = T.z     # v = Z‚ÇÅ
  B = T.z     # B = Z‚ÇÅ
  C = T.y     # C = Y‚ÇÅ

  v *= Q.y    # v = Z‚ÇÅY‚ÇÇ
  B *= Q.x    # B = Z‚ÇÅX‚ÇÇ

  A -= B      # A = X‚ÇÅ-Z‚ÇÅX‚ÇÇ
  C -= v      # C = Y‚ÇÅ-Z‚ÇÅY‚ÇÇ

  v = A       # v = X‚ÇÅ-Z‚ÇÅX‚ÇÇ
  when ECP_SWei_Proj.F.C.getSexticTwist() == M_Twist:
    A *= SexticNonResidue # A = Œæ (X‚ÇÅ - Z‚ÇÅX‚ÇÇ)

  v *= Q.y    # v = (X‚ÇÅ-Z‚ÇÅX‚ÇÇ) Y‚ÇÇ
  B = C       # B = Y‚ÇÅ-Z‚ÇÅY‚ÇÇ
  B *= Q.x    # B = (Y‚ÇÅ-Z‚ÇÅY‚ÇÇ) X‚ÇÇ
  B -= v      # B = (Y‚ÇÅ-Z‚ÇÅY‚ÇÇ) X‚ÇÇ - (X‚ÇÅ-Z‚ÇÅX‚ÇÇ) Y‚ÇÇ

  C.neg()     # C = -(Y‚ÇÅ-Z‚ÇÅY‚ÇÇ)

func line_double*(line: var Line, T: var ECP_SWei_Proj, P: ECP_SWei_Aff) =
  ## Doubling step of the Miller loop
  ## T in G2, P in G1
  ##
  ## Compute lt,t(P)
  ##
  # TODO fused line doubling from Costello 2009, Grewal 2012, Aranha 2013
  line_eval_double(line, T)
  line.line_update(P)
  T.double()

func line_add*[C](
       line: var Line,
       T: var ECP_SWei_Proj[Fp2[C]],
       Q: ECP_SWei_Aff[Fp2[C]], P: ECP_SWei_Aff[Fp[C]]) =
  ## Addition step of the Miller loop
  ## T and Q in G2, P in G1
  ##
  ## Compute lt,q(P)
  # TODO fused line addition from Costello 2009, Grewal 2012, Aranha 2013
  line_eval_add(line, T, Q)
  line.line_update(P)
  # TODO: mixed addition
  var QProj {.noInit.}: ECP_SWei_Proj[Fp2[C]]
  QProj.projectiveFromAffine(Q)
  T += QProj
